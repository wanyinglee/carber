{"version":3,"sources":["components/BasisDataTable.jsx","containers/BasisDataTableContainer/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["gridOptions","columnsDefs","headerName","field","filter","sort","filterParams","filterOptions","defaultOption","newRowsAction","valueFormatter","param","Number","value","toFixed","defaultColGroupDef","editable","resizable","sortable","BasisDataTable","data","useState","gridApi","setGridApi","className","style","height","onGridReady","params","api","rowData","columnDefs","defaultColDef","onFirstDataRendered","sizeColumnsToFit","BasisDataTableContainer","exchangeInfo","setExchangeInfo","premiumIndex","setPremiumIndex","getPremiumIndex","axios","get","getExchangeInfo","getBasisRate","useCallback","indexInfo","symbol","indexOf","lastFundingRate","markPrice","indexPrice","getAnnualizedBasis","rate","Math","pow","ratio","info","deliveryDate","time","useEffect","then","response","result","symbols","interval","setInterval","clearInterval","length","basisData","map","r","pair","price","spotPrice","basis","annualizedBasis","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5fb1a64.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\n\nconst gridOptions = {\n  columnsDefs: [\n    {\n      headerName: 'Symbol',\n      field: 'symbol',\n      filter: 'agTextColumnFilter',\n    },\n    {\n      headerName: 'Pair',\n      field: 'pair',\n      sort: 'asc',\n      filter: 'agTextColumnFilter',\n      filterParams: {\n        filterOptions: ['contains', 'startsWith'],\n        defaultOption: 'startsWith',\n        newRowsAction: 'keep',\n      },\n    },\n    {\n      headerName: 'Price',\n      field: 'price',\n    },\n    {\n      headerName: 'Spot Price',\n      field: 'spotPrice',\n    },\n    {\n      headerName: 'Basis',\n      field: 'basis',\n      valueFormatter: param => `${(Number(param.value) * 100).toFixed(4)}%`,\n    },\n    {\n      headerName: 'Annualized Basis',\n      field: 'annualizedBasis',\n      valueFormatter: param => `${(Number(param.value) * 100).toFixed(1)}%`,\n    }\n  ],\n  defaultColGroupDef: {\n    editable: false,\n    resizable: true,\n    sortable: true,\n  }\n};\n\nconst BasisDataTable = ({ data }) => {\n  const [gridApi, setGridApi] = useState(null);\n\n  const onGridReady = params => {\n    setGridApi(params.api);\n  };\n\n  const onFirstDataRendered = params => {\n    gridApi.sizeColumnsToFit();\n  };\n\n  return (\n    <div className=\"ag-theme-alpine\" style={{ height: '100vh' }}>\n      <AgGridReact onGridReady={onGridReady} rowData={data} columnDefs={gridOptions.columnsDefs} defaultColDef={gridOptions.defaultColGroupDef} onFirstDataRendered={onFirstDataRendered} />\n    </div>\n  );\n};\n\nexport default BasisDataTable;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\nimport BasisDataTable from '../../components/BasisDataTable';\n\nconst BasisDataTableContainer = () => {\n  const [exchangeInfo, setExchangeInfo] = useState([]);\n  const [premiumIndex, setPremiumIndex] = useState([]);\n\n  const getPremiumIndex = () => {\n    return axios.get('https://dapi.binance.com/dapi/v1/premiumIndex');\n  }\n  const getExchangeInfo = () => {\n    return axios.get('https://dapi.binance.com/dapi/v1/exchangeInfo');\n  }\n\n  const getBasisRate = useCallback((indexInfo) => {\n    if (indexInfo.symbol.indexOf('_PERP') > -1) {\n      return Number(indexInfo.lastFundingRate);\n    } else {\n      return Number(indexInfo.markPrice) / Number(indexInfo.indexPrice) - 1;\n    }\n  }, []);\n\n  const getAnnualizedBasis = useCallback((indexInfo, exchangeInfo) => {\n    const rate = getBasisRate(indexInfo);\n    if (indexInfo.symbol.indexOf('_PERP') > -1) {\n      return Math.pow(1 + Number(indexInfo.lastFundingRate), 365 * 3) - 1;\n    } else {\n      const expiryDate = exchangeInfo.filter(info => info.symbol === indexInfo.symbol)[0].deliveryDate;\n      const currentDate = indexInfo.time;\n      const ratio = 365 * 24 * 3600 * 1000 / (expiryDate - currentDate);\n      return Math.pow(1 + Number(rate), ratio) - 1;\n    }\n  }, [getBasisRate]);\n\n  useEffect(() => {\n    getExchangeInfo().then(response => {\n      const result = response.data.symbols;\n      setExchangeInfo(result);\n    });\n\n    const interval = setInterval(() => {\n      getExchangeInfo().then(response => {\n        const result = response.data.symbols;\n        setExchangeInfo(result);\n      });\n    }, 3600 * 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    if (exchangeInfo && exchangeInfo.length) {\n      getPremiumIndex().then(response => {\n        const basisData = response.data.map(r => ({ symbol: r.symbol, pair: r.pair, price: r.markPrice, spotPrice: r.indexPrice, basis: getBasisRate(r), annualizedBasis: getAnnualizedBasis(r, exchangeInfo) }));\n        setPremiumIndex(basisData);\n      });\n\n      const interval = setInterval(() => {\n        getPremiumIndex().then(response => {\n          const basisData = response.data.map(r => ({ symbol: r.symbol, pair: r.pair, price: r.markPrice, spotPrice: r.indexPrice, basis: getBasisRate(r), annualizedBasis: getAnnualizedBasis(r, exchangeInfo) }));\n          setPremiumIndex(basisData);\n        });\n      }, 30 * 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [exchangeInfo, getAnnualizedBasis, getBasisRate]);\n\n  return <BasisDataTable data={premiumIndex} />\n};\n\nexport default BasisDataTableContainer;\n","import React from 'react';\n\nimport BasisDataTableContainer from './containers/BasisDataTableContainer';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BasisDataTableContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}