{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["gridOptions","columnsDefs","headerName","field","filter","sort","filterParams","filterOptions","defaultOption","newRowsAction","valueFormatter","param","Number","value","toFixed","defaultColGroupDef","editable","resizable","sortable","App","useState","gridApi","setGridApi","setGridColumnApi","exchangeInfo","setExchangeInfo","rowData","setRowData","getPremiumIndex","axios","get","getExchangeInfo","getBasisRate","indexInfo","symbol","indexOf","lastFundingRate","markPrice","indexPrice","getAnnualizedBasis","rate","Math","pow","ratio","info","deliveryDate","time","useEffect","then","response","result","data","symbols","interval","setInterval","clearInterval","length","basisData","map","r","pair","price","spotPrice","basis","annualizedBasis","className","style","height","onGridReady","params","api","columnApi","columnDefs","defaultColDef","onFirstDataRendered","sizeColumnsToFit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d1c2d1e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport './App.css';\n\nconst gridOptions = {\n  columnsDefs: [\n    {\n      headerName: 'Symbol',\n      field: 'symbol',\n      filter: 'agTextColumnFilter',\n    },\n    {\n      headerName: 'Pair',\n      field: 'pair',\n      sort: 'asc',\n      filter: 'agTextColumnFilter',\n      filterParams: {\n        filterOptions: ['contains', 'startsWith'],\n        defaultOption: 'startsWith',\n        newRowsAction: 'keep',\n      },\n    },\n    {\n      headerName: 'Price',\n      field: 'price',\n    },\n    {\n      headerName: 'Spot Price',\n      field: 'spotPrice',\n    },\n    {\n      headerName: 'Basis',\n      field: 'basis',\n      valueFormatter: param => `${(Number(param.value) * 100).toFixed(4)}%`,\n    },\n    {\n      headerName: 'Annualized Basis',\n      field: 'annualizedBasis',\n      valueFormatter: param => `${(Number(param.value) * 100).toFixed(1)}%`,\n    }\n  ],\n  defaultColGroupDef: {\n    editable: false,\n    resizable: true,\n    sortable: true,\n  }\n}\n\nconst App = () => {\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n\n  const [exchangeInfo, setExchangeInfo] = useState([]);\n  const [rowData, setRowData] = useState([]);\n\n  const getPremiumIndex = () => {\n    return axios.get('https://dapi.binance.com/dapi/v1/premiumIndex');\n  }\n  const getExchangeInfo = () => {\n    return axios.get('https://dapi.binance.com/dapi/v1/exchangeInfo');\n  }\n\n  const getBasisRate = (indexInfo) => {\n    if (indexInfo.symbol.indexOf('_PERP') > -1) {\n      return Number(indexInfo.lastFundingRate);\n    } else {\n      return Number(indexInfo.markPrice) / Number(indexInfo.indexPrice) - 1;\n    }\n  };\n\n  const getAnnualizedBasis = (indexInfo, exchangeInfo) => {\n    const rate = getBasisRate(indexInfo);\n    if (indexInfo.symbol.indexOf('_PERP') > -1) {\n      return Math.pow(1 + Number(indexInfo.lastFundingRate), 365 * 3) - 1;\n    } else {\n      const expiryDate = exchangeInfo.filter(info => info.symbol === indexInfo.symbol)[0].deliveryDate;\n      const currentDate = indexInfo.time;\n      const ratio = 365 * 24 * 3600 * 1000 / (expiryDate - currentDate);\n      return Math.pow(1 + Number(rate), ratio) - 1;\n    }\n  }\n\n  useEffect(() => {\n    getExchangeInfo().then(response => {\n      const result = response.data.symbols;\n      setExchangeInfo(result);\n    });\n\n    const interval = setInterval(() => {\n      getExchangeInfo().then(response => {\n        const result = response.data.symbols;\n        setExchangeInfo(result);\n      });\n    }, 3600 * 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    if (exchangeInfo && exchangeInfo.length) {\n      getPremiumIndex().then(response => {\n        const basisData = response.data.map(r => ({ symbol: r.symbol, pair: r.pair, price: r.markPrice, spotPrice: r.indexPrice, basis: getBasisRate(r), annualizedBasis: getAnnualizedBasis(r, exchangeInfo) }));\n        setRowData(basisData);\n      });\n\n      const interval = setInterval(() => {\n        getPremiumIndex().then(response => {\n          const basisData = response.data.map(r => ({ symbol: r.symbol, pair: r.pair, price: r.markPrice, spotPrice: r.indexPrice, basis: getBasisRate(r), annualizedBasis: getAnnualizedBasis(r, exchangeInfo) }));\n          setRowData(basisData);\n        });\n      }, 30 * 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [exchangeInfo]);\n\n  const onGridReady = params => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n  };\n\n  const onFirstDataRendered = params => {\n    gridApi.sizeColumnsToFit();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"ag-theme-alpine\" style={{ height: '100vh' }}>\n        <AgGridReact onGridReady={onGridReady} rowData={rowData} columnDefs={gridOptions.columnsDefs} defaultColDef={gridOptions.defaultColGroupDef} onFirstDataRendered={onFirstDataRendered} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}