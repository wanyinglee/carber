{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["columns","title","dataIndex","key","render","text","record","index","Number","toFixed","App","useState","data","setData","getPerpetualBasis","axios","get","getCurrentQuarterBasis","getNextQuarterBasis","getBasisRate","type","rate","now","Date","curRatio","nextRatio","Math","pow","useEffect","Promise","all","then","response","result","map","r","symbol","contractType","price","futuresPrice","spotPrice","indexPrice","basis","basisRate","interval","setInterval","clearInterval","className","length","dataSource","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"uQAYMA,EAAU,CACd,CACEC,MAAO,SACPC,UAAW,SACXC,IAAK,UAEP,CACEF,MAAO,QACPC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACC,EAAMC,EAAQC,GAAf,OAAyBC,OAAOH,GAAMI,QAAQ,KAExD,CACER,MAAO,aACPC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAACC,EAAMC,EAAQC,GAAf,OAAyBC,OAAOH,GAAMI,QAAQ,KAExD,CACER,MAAO,QACPC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACC,EAAMC,EAAQC,GAAf,iBAAoC,IAAPF,GAAYI,QAAQ,GAAjD,QAyFGC,EArFH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,IAA3C,mBAEMG,GAFN,UAE0B,WACxB,OAAOC,IAAMC,IAAI,sGAEbC,EAAyB,WAC7B,OAAOF,IAAMC,IAAI,2GAEbE,EAAsB,WAC1B,OAAOH,IAAMC,IAAI,wGAsBbG,EAAe,SAACC,EAAMC,GAC1B,IAAMC,EAAM,IAAIC,KAEVC,EAAY,UADI,IAAID,KAAK,KAAM,EAAG,GAAI,IACUD,GAAO,KAEvDG,EAAa,UADI,IAAIF,KAAK,KAAM,EAAG,GAAI,IACWD,GAAO,KAE/D,OAAQF,GACN,IAAK,YACH,OAAOM,KAAKC,IAAI,EAAInB,OAAOa,GAAO,MAAW,EAC/C,IAAK,kBACH,OAAOK,KAAKC,IAAI,EAAInB,OAAOa,GAAOG,GAAY,EAChD,IAAK,eACH,OAAOE,KAAKC,IAAI,EAAInB,OAAOa,GAAOI,GAAa,EACjD,QACE,OAAO,IA6Bb,OAzBAG,qBAAU,WACRC,QAAQC,IAAI,CAAChB,IAAqBG,IAA0BC,MAAwBa,MAAK,SAAAC,GACvF,IAAMC,EAAM,sBAAOD,EAAS,GAAGpB,MAAnB,YAA4BoB,EAAS,GAAGpB,MAAxC,YAAiDoB,EAAS,GAAGpB,OACzEC,EAAQoB,EAAOC,KAAI,SAAAC,GAAC,MAAK,CAAEC,OAAQD,EAAEE,aAAcC,MAAOH,EAAEI,aAAcC,UAAWL,EAAEM,WAAYC,MAAOvB,EAAagB,EAAEE,aAAcF,EAAEQ,mBAQ3I,IAAMC,EAAWC,aAAY,WAC3BhB,QAAQC,IAAI,CAAChB,IAAqBG,IAA0BC,MAAwBa,MAAK,SAAAC,GACvF,IAAMC,EAAM,sBAAOD,EAAS,GAAGpB,MAAnB,YAA4BoB,EAAS,GAAGpB,MAAxC,YAAiDoB,EAAS,GAAGpB,OACzEC,EAAQoB,EAAOC,KAAI,SAAAC,GAAC,MAAK,CAAEC,OAAQD,EAAEE,aAAcC,MAAOH,EAAEI,aAAcC,UAAWL,EAAEM,WAAYC,MAAOvB,EAAagB,EAAEE,aAAcF,EAAEQ,qBAO1I,KACH,OAAO,kBAAMG,cAAcF,MAC1B,IAGD,qBAAKG,UAAU,MAAf,SACGnC,EAAKoC,QAAU,cAAC,IAAD,CAAOC,WAAYrC,EAAMZ,QAASA,OCzGzCkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAStD,OACP,cAAC,IAAMuD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b23da2e8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { Table } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst bybitSymbolMapping = {\n  BTCUSD: 'PERPETUAL',\n  BTCUSDM21: 'CURRENT_QUARTER',\n  BTCUSDU21: 'NEXT_QUARTER',\n};\n\nconst columns = [\n  {\n    title: 'Symbol',\n    dataIndex: 'symbol',\n    key: 'symbol',\n  },\n  {\n    title: 'Price',\n    dataIndex: 'price',\n    key: 'price',\n    render: (text, record, index) => Number(text).toFixed(1),\n  },\n  {\n    title: 'Spot Price',\n    dataIndex: 'spotPrice',\n    key: 'spotPrice',\n    render: (text, record, index) => Number(text).toFixed(1),\n  },\n  {\n    title: 'Basis',\n    dataIndex: 'basis',\n    key: 'basis',\n    render: (text, record, index) => `${(text * 100).toFixed(1)}%`,\n  },\n];\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [bybitData, setBybitData] = useState([]);\n  // Binance\n  const getPerpetualBasis = () => {\n    return axios.get('https://dapi.binance.com/futures/data/basis?pair=BTCUSD&contractType=PERPETUAL&period=5m&limit=1');\n  };\n  const getCurrentQuarterBasis = () => {\n    return axios.get('https://dapi.binance.com/futures/data/basis?pair=BTCUSD&contractType=CURRENT_QUARTER&period=5m&limit=1');\n  }\n  const getNextQuarterBasis = () => {\n    return axios.get('https://dapi.binance.com/futures/data/basis?pair=BTCUSD&contractType=NEXT_QUARTER&period=5m&limit=1');\n  }\n  // Bybit\n  const getByBitBasis = () => {\n    return axios.get('https://api.bybit.com/v2/public/tickers', {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Accept': '*/*',\n        'Access-Control-Allow-Methods': 'PUT, POST, GET, DELETE, PATCH, OPTIONS',\n      }\n    });\n  }\n  const getByBitRate = (record) => {\n    switch (record.symbol) {\n      case 'BTCUSD':\n        return record.predicted_funding_rate;\n      case 'BTCUSDM21':\n      case 'BTCUSDU21':\n        return record.mark_price / record.index_price - 1;\n    }\n  }\n\n  const getBasisRate = (type, rate) => {\n    const now = new Date();\n    const curExpiryDate = new Date(2021, 5, 25, 16);\n    const curRatio = (365 * 24 * 3600 / ((curExpiryDate - now) / 1000));\n    const nextExpiryDate = new Date(2021, 8, 24, 16);\n    const nextRatio = (365 * 24 * 3600 / ((nextExpiryDate - now) / 1000));\n\n    switch (type) {\n      case 'PERPETUAL':\n        return Math.pow(1 + Number(rate), 365 * 3) - 1;\n      case 'CURRENT_QUARTER':\n        return Math.pow(1 + Number(rate), curRatio) - 1;\n      case 'NEXT_QUARTER':\n        return Math.pow(1 + Number(rate), nextRatio) - 1;\n      default:\n        return 0;\n    }\n  }\n\n  useEffect(() => {\n    Promise.all([getPerpetualBasis(), getCurrentQuarterBasis(), getNextQuarterBasis()]).then(response => {\n      const result = [...response[0].data, ...response[1].data, ...response[2].data];\n      setData(result.map(r => ({ symbol: r.contractType, price: r.futuresPrice, spotPrice: r.indexPrice, basis: getBasisRate(r.contractType, r.basisRate)})));\n    });\n    // getByBitBasis().then(response => {\n    //   const btcResult = response.result.filter(r => r.symbol.startWith('BTCUSD'));\n    //   const bybitData = btcResult.map(r => ({ symbol: bybitSymbolMapping(r.symbol), price: r.mark_price, spotPrice: r.index_price, basis: getBasisRate(bybitSymbolMapping(r.symbol), getByBitRate(r)) }));\n    //   setBybitData(bybitData);\n    // });\n\n    const interval = setInterval(() => {\n      Promise.all([getPerpetualBasis(), getCurrentQuarterBasis(), getNextQuarterBasis()]).then(response => {\n        const result = [...response[0].data, ...response[1].data, ...response[2].data];\n        setData(result.map(r => ({ symbol: r.contractType, price: r.futuresPrice, spotPrice: r.indexPrice, basis: getBasisRate(r.contractType, r.basisRate) })));\n      });\n      // getByBitBasis().then(response => {\n      //   const btcResult = response.result.filter(r => r.symbol.startWith('BTCUSD'));\n      //   const bybitData = btcResult.map(r => ({ symbol: bybitSymbolMapping(r.symbol), price: r.mark_price, spotPrice: r.index_price, basis: getBasisRate(bybitSymbolMapping(r.symbol), getByBitRate(r)) }));\n      //   setBybitData(bybitData);\n      // });\n    }, 30 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {data.length && <Table dataSource={data} columns={columns} />}\n      {/* {bybitData.length && <Table dataSource={bybitData} columns={columns} />} */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}